---
title: "Python programming basics"
author: "Me"
format: 
  html:
    code-fold: show
    code-link: true
    self-contained: true
    toc: true
    code-tools:
      source: true
      toggle: true
      caption: Code
editor_options: 
  chunk_output_type: console
---

## Objects

### Basic types

Scalars

```{python}
# logical
True

# numeric
1

# character
"a"

# missing
None
```

### Vectors

Combine objects of the same type in a vector

```{python}
# logical
[True, False]

# numeric
[1, 2, 3]

# character
["a", "b"]
```

Access items using square brackets

```{python}
# numbering starts from 0 (unlike R, which starts with 1)
my_vector = ["a", "b"]
my_vector[0]

# select multiple items with a list of indices
my_vector[0:2]
```

### Lists

Combine objects of different types in a list

```{python}
# unnamed list
my_list = [True, False, 1, 2, 3, "a", "b"]

my_list
```

List elements can be named

```{python}
# named list
my_named_list = {
  "logical": [True, False],
  "numeric": [1, 2],
  "character": ["a", "b"]
}

my_named_list
```

Lists can contain lists (nested lists)

```{python}
nested_list = ["a", ["b", ["c"]]]

nested_list
```

Subset lists using square brackets

```{python}
my_named_list["logical"]
```

Access list items with square brackets

```{python}
# with square brackets supply item name in quotes - return
my_named_list["character"]
```

### Data frames

A special type of list, where each item is a vector of the same length

```{python}
import pandas as pd

# create by hand with pd.DataFrame()
pd.DataFrame({"x": [1, 2, 3], "y": ["a", "b", "c"]})

# convert from a dictionary with pd.DataFrame()
df = pd.DataFrame(my_named_list)
df
```

Subset with square brackets

```{python}
# first row, all columns
df.iloc[0]

# all rows, first two columns
df.iloc[:, 0:2]

# (also) all rows, first two columns
df[["logical", "numeric"]]
```

Access columns with square brackets

```{python}
# with square brackets supply column name in quotes - return
df["character"]
```

### Functions

Functions are blocks of code

```{python}
# create a function with def <function_name>(): <INSERT CODE>
def hello_world():
  print("Hello world")

# view the function by simply typing its name
hello_world
```

Functions may be called to execute the code they contain

```{python}
hello_world()
```

Arguments extend function utility

```{python}
def hello(x):
  print(f"Hello {x}")

hello("world!")
hello("moon!")
```

## Conditions

### Comparison operators

| Operator | Description                  | Example          | Result    |
|----------|------------------------------|------------------|-----------|
| `==`     | Equal to                     | `5 == 5`         | `True`    |
| `!=`     | Not equal to                 | `5 != 4`         | `True`    |
| `<`      | Less than                    | `3 < 5`          | `True`    |
| `>`      | Greater than                 | `3 > 5`          | `False`   |
| `<=`     | Less than or equal to        | `3 <= 3`         | `True`    |
| `>=`     | Greater than or equal to     | `3 >= 5`         | `False`   |

### Logical operators

| Operator | Description                                                    | Example                             | Result         |
|----------|----------------------------------------------------------------|-------------------------------------|----------------|
| `and`    | Element-wise AND                                               | `True and False`                     | `False`        |
| `or`     | Element-wise OR                                                | `True or False`                      | `True`         |
| `not`    | NOT                                                            | `not True`                           | `False`        |
| `in`     | Checks if elements in one vector are present in another vector  | `2 in [1, 2, 3]`                   | `True`         |

Examples

```{python}
# returns True
"a" in ["a", "b"]

# returns False
not True

# returns True
True or False

# returns False
True and False
```

### if, else if, else

```{python}
# try assigning different values to x
x = 3

if x > 1:
  print("x is bigger than 1")
elif x == 1:
  print("x equals 1")
else:
  print("x is less than 1")
```

## Data wrangling

### Filtering rows

Use a data mask

```{python}
# a data mask - a logical vector
data_mask = df["numeric"] > 1
data_mask

# can be used to subset (filter) rows in a data frame
df[data_mask]
```

### Creating columns

```{python}
# create a new column
df["greater_than_1"] = ["Greater than 1" if x > 1 else "Less than 1" for x in df["numeric"]]
df

# overwrite an existing column
df["character"] = [x.upper() for x in df["character"]]
df
```

## Loops

### For loops

Do something for each item in an interable (vector/list)

```{python}
for item in my_list:
  print(type(item))
```

Can also loop through by index using `range()`

```{python}
for i in range(len(my_list)):
  print(i)
  print(type(my_list[i]))
```

A common pattern is to create an empty list to hold the results from your loop

```{python}
# initiate an empty list
result = []

# loop through an iterable
iterable = [1, 2, 3, 4, 5]

for i in range(len(iterable)):
  result.append(iterable[i])

# final result
result
```

### While loops

Continue looping while a certain condition is met (beware infinite loops!)

```{python}
x = 0

while x < 5:
  print(x)
  x += 1
```
